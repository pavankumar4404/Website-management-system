import React, { useState, useEffect } from 'react';
import BackButton from '../components/BackButton';
import Spinner from '../components/Spinner';
import axios from 'axios';
import { useNavigate, useParams } from 'react-router-dom';
import { useSnackbar } from 'notistack';

const EditVulnerability = () => {
  const [vulnerability, setVulnerability] = useState({
    website_id: '',
    vulnerability_source: '',
    vulnerability_subject: '',
    vulnerability_reported_date: '',
    document_path: '',
    reference_link: '',
    status: ''
  });
  const [loading, setLoading] = useState(false);
  const [sources, setSources] = useState([]);
  const [statuses, setStatuses] = useState([]);
  const navigate = useNavigate();
  const { id } = useParams();
  const { enqueueSnackbar } = useSnackbar();

  useEffect(() => {
    setLoading(true);
    axios.get(`http://localhost:8800/vulnerabilities/${id}`)
      .then(response => {
        const vulnerability = response.data;
        setVulnerability({
          website_id: vulnerability.website_id,
          vulnerability_source: vulnerability.vulnerability_source,
          vulnerability_subject: vulnerability.vulnerability_subject,
          vulnerability_reported_date: vulnerability.vulnerability_reported_date,
          document_path: vulnerability.document_path,
          reference_link: vulnerability.reference_link,
          status: vulnerability.status
        });
        setLoading(false);
      })
      .catch(error => {
        setLoading(false);
        enqueueSnackbar('Error loading vulnerability details', { variant: 'error' });
        console.error(error);
      });

    axios.get('http://localhost:8800/common_names/category/20')
      .then(response => {
        setSources(response.data);
      })
      .catch(error => {
        console.error('Error fetching sources:', error);
      });

    axios.get('http://localhost:8800/common_names/category/21')
      .then(response => {
        setStatuses(response.data);
      })
      .catch(error => {
        console.error('Error fetching statuses:', error);
      });
  }, [id, enqueueSnackbar]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setVulnerability({ ...vulnerability, [name]: value });
  };

  const handleEditVulnerability = () => {
    setLoading(true);
    axios.put(`http://localhost:8800/vulnerabilities/${id}`, vulnerability)
      .then(() => {
        setLoading(false);
        enqueueSnackbar('Vulnerability edited successfully', { variant: 'success' });
        navigate('/vulnerabilities');
      })
      .catch((error) => {
        setLoading(false);
        enqueueSnackbar('Error editing vulnerability', { variant: 'error' });
        console.error(error);
      });
  };

  return (
    <div className='p-4'>
      <BackButton />
      <h1 className='text-3xl my-4'>Edit Vulnerability</h1>
      {loading && <Spinner />}
      <div className='flex flex-col border-2 border-sky-400 rounded-xl w-[600px] p-4 mx-auto'>
        <div className='my-4'>
          <label className='text-xl mr-4 text-gray-500'>Website ID</label>
          <input
            type='number'
            name='website_id'
            value={vulnerability.website_id}
            onChange={handleChange}
            className='border-2 border-gray-500 px-4 py-2 w-full'
          />
        </div>
        <div className='my-4'>
          <label className='text-xl mr-4 text-gray-500'>Vulnerability Source</label>
          <select
            name='vulnerability_source'
            value={vulnerability.vulnerability_source}
            onChange={handleChange}
            className='border-2 border-gray-500 px-4 py-2 w-full'
          >
            <option value="" disabled>Select a source</option>
            {sources.map(item => (
              <option key={item.common_id} value={item.common_id}>
                {item.common_name}
              </option>
            ))}
          </select>
        </div>
        <div className='my-4'>
          <label className='text-xl mr-4 text-gray-500'>Vulnerability Subject</label>
          <input
            type='text'
            name='vulnerability_subject'
            value={vulnerability.vulnerability_subject}
            onChange={handleChange}
            className='border-2 border-gray-500 px-4 py-2 w-full'
          />
        </div>
        <div className='my-4'>
          <label className='text-xl mr-4 text-gray-500'>Vulnerability Report Date</label>
          <input
            type='date'
            name='vulnerability_reported_date'
            value={vulnerability.vulnerability_reported_date}
            onChange={handleChange}
            className='border-2 border-gray-500 px-4 py-2 w-full'
          />
        </div>
        <div className='my-4'>
          <label className='text-xl mr-4 text-gray-500'>Document Path</label>
          <input
            type='text'
            name='document_path'
            value={vulnerability.document_path}
            onChange={handleChange}
            className='border-2 border-gray-500 px-4 py-2 w-full'
          />
        </div>
        <div className='my-4'>
          <label className='text-xl mr-4 text-gray-500'>Document Link</label>
          <input
            type='text'
            name='reference_link'
            value={vulnerability.reference_link}
            onChange={handleChange}
            className='border-2 border-gray-500 px-4 py-2 w-full'
          />
        </div>
        <div className='my-4'>
          <label className='text-xl mr-4 text-gray-500'>Status</label>
          <select
            name='status'
            value={vulnerability.status}
            onChange={handleChange}
            className='border-2 border-gray-500 px-4 py-2 w-full'
          >
            <option value="" disabled>Select a status</option>
            {statuses.map(item => (
              <option key={item.common_id} value={item.common_id}>
                {item.common_name}
              </option>
            ))}
          </select>
        </div>
        <button className='p-2 bg-sky-300 my-4' onClick={handleEditVulnerability}>
          Save
        </button>
      </div>
    </div>
  );
};

export default EditVulnerability;
