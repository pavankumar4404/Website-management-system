import React, { useState, useEffect } from 'react';
import BackButton from '../components/BackButton';
import Spinner from '../components/Spinner';
import axios from 'axios';
import { useNavigate, useParams } from 'react-router-dom';
import { useSnackbar } from 'notistack';

const VulnerabilityAction = () => {
  const [vulnerability, setVulnerability] = useState({});
  const [vulnerabilityAction, setVulnerabilityAction] = useState('');
  const [vulnerabilityActionDate, setVulnerabilityActionDate] = useState('');
  const [vulnerabilityStatus, setVulnerabilityStatus] = useState('');
  const [statusOptions, setStatusOptions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [actionId, setActionId] = useState(null);
  const navigate = useNavigate();
  const { id } = useParams();
  const { enqueueSnackbar } = useSnackbar();

  useEffect(() => {
    setLoading(true);
    axios.get(`http://localhost:8800/vulnerability_with_website/${id}`)
      .then((response) => {
        setVulnerability(response.data);
        return axios.get(`http://localhost:8800/vulnerability_action/vulnerability/${id}`);
      })
      .then((response) => {
        if (response.data) {
          setVulnerabilityAction(response.data.action_detail);
          setVulnerabilityActionDate(response.data.action_date);
          setVulnerabilityStatus(response.data.vulnerability_status);
          setActionId(response.data.action_id);
        }
        setLoading(false);
      })
      .catch((error) => {
        setLoading(false);
        enqueueSnackbar('Error loading vulnerability details or action', { variant: 'error' });
        console.log(error);
      });

    axios.get('http://localhost:8800/common_names/category/21')
      .then((response) => {
        setStatusOptions(response.data);
      })
      .catch((error) => {
        enqueueSnackbar('Error loading status options', { variant: 'error' });
        console.log(error);
      });
  }, [id]);

  const handleSaveAction = () => {
    const data = {
      website_id: vulnerability.website_id,
      vulnerability_id: vulnerability.vulnerability_id,
      action_detail: vulnerabilityAction,
      action_date: vulnerabilityActionDate,
      vulnerability_status: vulnerabilityStatus
    };

    setLoading(true);
    if (actionId) {
      axios.put(`http://localhost:8800/vulnerability_action/${actionId}`, data)
        .then(() => {
          setLoading(false);
          enqueueSnackbar('Vulnerability action updated successfully', { variant: 'success' });
          navigate('/vulnerabilities');
        })
        .catch((error) => {
          setLoading(false);
          enqueueSnackbar('Error updating vulnerability action', { variant: 'error' });
          console.log(error);
        });
    } else {
      axios.post('http://localhost:8800/vulnerability_action', data)
        .then(() => {
          setLoading(false);
          enqueueSnackbar('Vulnerability action added successfully', { variant: 'success' });
          navigate('/vulnerabilities');
        })
        .catch((error) => {
          setLoading(false);
          enqueueSnackbar('Error adding vulnerability action', { variant: 'error' });
          console.log(error);
        });
    }
  };

  return (
    <div className='p-4'>
      <BackButton />
      <h1 className='text-3xl my-4'>Vulnerability Action</h1>
      {loading && <Spinner />}
      <div className='flex flex-col border-2 border-sky-400 rounded-xl w-[600px] p-4 mx-auto'>
        <div className='mb-4'>
          <label className='block text-gray-700'>Website URL</label>
          <input
            type='text'
            value={vulnerability.website_url || ''}
            readOnly
            className='p-2 border rounded w-full'
          />
        </div>
        <div className='mb-4'>
          <label className='block text-gray-700'>Website Name</label>
          <input
            type='text'
            value={vulnerability.website_name || ''}
            readOnly
            className='p-2 border rounded w-full'
          />
        </div>
        <div className='mb-4'>
          <label className='block text-gray-700'>Website ID</label>
          <input
            type='text'
            value={vulnerability.website_id || ''}
            readOnly
            className='p-2 border rounded w-full'
          />
        </div>
        <div className='mb-4'>
          <label className='block text-gray-700'>Vulnerability Action</label>
          <input
            type='text'
            value={vulnerabilityAction}
            onChange={(e) => setVulnerabilityAction(e.target.value)}
            className='p-2 border rounded w-full'
          />
        </div>
        <div className='mb-4'>
          <label className='block text-gray-700'>Vulnerability Action Date</label>
          <input
            type='date'
            value={vulnerabilityActionDate}
            onChange={(e) => setVulnerabilityActionDate(e.target.value)}
            className='p-2 border rounded w-full'
          />
        </div>
        <div className='mb-4'>
          <label className='block text-gray-700'>Vulnerability Status</label>
          <select
            value={vulnerabilityStatus}
            onChange={(e) => setVulnerabilityStatus(e.target.value)}
            className='border-2 border-gray-500 px-4 py-2 w-full'
          >
            <option value="" disabled>Select a status</option>
            {statusOptions.map((option) => (
              <option key={option.common_id} value={option.common_id}>
                {option.common_name}
              </option>
            ))}
          </select>
        </div>
        <button className='p-2 bg-sky-300 m-8' onClick={handleSaveAction}>
          Save
        </button>
      </div>
    </div>
  );
}

export default VulnerabilityAction;